
mod std::tests::option

use std::test::*

pub fun as_string() {
    assert_eq(Option::as_string(Option::Some(5)), "Some(5)")
    assert_eq(Option::as_string(Option::Some(10)), "Some(10)")
    assert_eq(Option::as_string(Option::None[Int]), "None")
}

pub fun as_hash() {
    assert_eq(Option::as_hash(Option::Some(42)), Int::as_hash(42))
    assert_eq(Option::as_hash(Option::Some("Hello")), String::as_hash("Hello"))
    assert_eq(
        Option::as_hash[String](Option::None[String]), 
        Option::as_hash[Int](Option::None[Int])
    )
}

pub fun and() {
    assert_eq(Option::and(Option::Some(25), Option::Some(10)), Option::Some(10))
    assert_eq(Option::and(Option::Some(25), Option::None), Option::None)
    assert_eq(Option::and(Option::None, Option::Some(10)), Option::None)
    assert_eq(Option::and[Unit](Option::None, Option::None), Option::None)
}

pub fun and_then() {
    assert_eq(
        Option::and_then(Option::Some(15), |x| Option::Some(x * 2)), 
        Option::Some(30)
    )
    assert_eq(
        Option::and_then[Unit, Unit](Option::None, |x| assert_unreachable()),
        Option::None
    )
    assert_eq(
        Option::and_then(Option::Some(unit), |x| Option::None),
        Option::None[Unit]
    )
}

pub fun or() {
    assert_eq(Option::or(Option::Some(25), Option::Some(10)), Option::Some(25))
    assert_eq(Option::or(Option::Some(25), Option::None), Option::Some(25))
    assert_eq(Option::or(Option::None, Option::Some(10)), Option::Some(10))
    assert_eq(Option::or[Unit](Option::None, Option::None), Option::None)
}

pub fun or_else() {
    assert_eq(
        Option::or_else(Option::Some(25), || assert_unreachable()), 
        Option::Some(25)
    )
    assert_eq(
        Option::or_else(Option::Some(25), || assert_unreachable()), 
        Option::Some(25)
    )
    assert_eq(
        Option::or_else(Option::None, || Option::Some(10)), 
        Option::Some(10)
    )
    assert_eq(
        Option::or_else[Unit](Option::None, || Option::None), 
        Option::None
    )
}

pub fun unwrap_or() {
    assert_eq(Option::unwrap_or(Option::None[Int], 5), 5)
    assert_eq(Option::unwrap_or(Option::Some(25), 3), 25)
    assert_eq(Option::unwrap_or(Option::Some("hello"), "world"), "hello")
}

pub fun unwrap_or_else() {
    assert_eq(Option::unwrap_or_else(Option::None[Int], || 10), 10)
    assert_eq(
        Option::unwrap_or_else(Option::Some(12), || assert_unreachable()),
        12
    )
}

pub fun map() {
    assert_eq(
        Option::map[Int, Int](Option::Some(25), |x| x * 2),
        Option::Some(50)
    )
    assert_eq(
        Option::map[Int, Int](Option::None, |x| assert_unreachable()),
        Option::None[Int]
    )
}

pub fun is_some() {
    assert_eq(Option::is_some(Option::Some(3)), true)
    assert_eq(Option::is_some(Option::None[String]), false)
}

pub fun is_none() {
    assert_eq(Option::is_none(Option::Some(2)), false)
    assert_eq(Option::is_none(Option::None[Float]), true)
}

pub fun ok_or() {
    assert_eq(
        Option::ok_or(Option::Some(25), "No value!"), 
        Result::Ok(25)
    )
    assert_eq(
        Option::ok_or(Option::None[Int], "No value!"), 
        Result::Err("No value!")
    )
}

pub fun ok_or_else() {
    assert_eq(
        Option::Some(25)
            |> Option::ok_or_else[Int, String](|| assert_unreachable()),
        Result::Ok(25)
    )
    assert_eq(
        Option::None
            |> Option::ok_or_else[Int, String](|| "No value!"),
        Result::Err("No value!")
    )
}

pub fun flatten() {
    assert_eq(
        Option::flatten(Option::Some(Option::Some(15))), 
        Option::Some(15)
    )
    assert_eq(
        Option::flatten(Option::Some(Option::None[Int])),
        Option::None[Int]
    )
    assert_eq(
        Option::flatten(Option::None[Option[String]]), 
        Option::None[String]
    )
}

pub fun as_seq() {
    val a = Option::as_seq(Option::Some(125))
    assert_eq(Sequence::next(a), Option::Some(125))
    assert_eq(Sequence::next(a), Option::None)
    val b = Option::as_seq(Option::None[Bool])
    assert_eq(Sequence::next(b), Option::None)
}