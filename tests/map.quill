
mod std::tests::map

use std::test::*

pub fun empty() {
    val m: Map[Int, Int] = Map::empty()
    assert_eq(Map::size(m), 0)
}

pub fun of() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3),
        Pair("B", 4),
    )
    assert_eq(Map::size(m), 3)
    assert_eq(Map::get(m, "A"), Option::Some(1))
    assert_eq(Map::get(m, "B"), Option::Some(4))
    assert_eq(Map::get(m, "C"), Option::Some(3))
}

pub fun collect() {
    val m: Map[String, Int] = List::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3),
        Pair("B", 4)
    ) |> List::values() |> Map::collect()
    assert_eq(Map::size(m), 3)
    assert_eq(Map::get(m, "A"), Option::Some(1))
    assert_eq(Map::get(m, "B"), Option::Some(4))
    assert_eq(Map::get(m, "C"), Option::Some(3))
}

pub fun set_load_factor() {
    val m: mut Map[String, Int] = Map::empty()
    Map::set_capacity(m, 4)
    Map::set_load_factor(m, 0.5)
    assert_eq(Map::capacity(m), 4)
    assert_eq(Map::load_factor(m), 0.5)
    Map::set(m, "A", 1)
    Map::set(m, "B", 2)
    assert_eq(Map::capacity(m), 4)
    assert_eq(Map::size(m), 2)
    Map::set(m, "C", 3)
    assert_eq(Map::capacity(m), 8)
    assert_eq(Map::size(m), 3)

}

pub fun set_capacity() {
    val m: mut Map[String, Int] = Map::empty()
    Map::set_capacity(m, 4)
    assert_eq(Map::capacity(m), 4)
    Map::set(m, "A", 1)
    Map::set(m, "B", 2)
    Map::set(m, "C", 3)
    assert_eq(Map::capacity(m), 4)
    assert_eq(Map::size(m), 3)
    Map::set(m, "D", 4)
    assert_eq(Map::capacity(m), 8)
    assert_eq(Map::size(m), 4)
    Map::set_capacity(m, 4)
    assert_eq(Map::capacity(m), 8)
    Map::set_capacity(m, 16)
    assert_eq(Map::capacity(m), 16)
}

pub fun add() {
    val m: mut Map[String, Int] = Map::empty()
    assert_eq(Map::add(m, Pair("A", 1)), Option::None)
    assert_eq(Map::add(m, Pair("B", 2)), Option::None)
    assert_eq(Map::add(m, Pair("C", 3)), Option::None)
    assert_eq(Map::add(m, Pair("B", 4)), Option::Some(2))
    assert_eq(Map::size(m), 3)
    assert_eq(Map::get(m, "A"), Option::Some(1))
    assert_eq(Map::get(m, "B"), Option::Some(4))
    assert_eq(Map::get(m, "C"), Option::Some(3))
}

pub fun set() {
    val m: mut Map[String, Int] = Map::empty()
    assert_eq(Map::set(m, "A", 1), Option::None)
    assert_eq(Map::set(m, "B", 2), Option::None)
    assert_eq(Map::set(m, "C", 3), Option::None)
    assert_eq(Map::set(m, "B", 4), Option::Some(2))
    assert_eq(Map::size(m), 3)
    assert_eq(Map::get(m, "A"), Option::Some(1))
    assert_eq(Map::get(m, "B"), Option::Some(4))
    assert_eq(Map::get(m, "C"), Option::Some(3))
}

pub fun as_string() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1)
        Pair("B", 2)
        Pair("C", 3)
    )
    val m_disp = Map::as_string(m)
    val allowed = List::of(
        "Map(A -> 1, B -> 2, C -> 3)",
        "Map(A -> 1, C -> 3, B -> 2)",
        "Map(B -> 2, A -> 1, C -> 3)",
        "Map(B -> 2, C -> 3, A -> 1)",
        "Map(C -> 3, A -> 1, B -> 2)",
        "Map(C -> 3, B -> 2, A -> 1)"
    )
    assert_eq(
        List::values(allowed) |> Sequence::any(|a| a == m_disp),
        true
    )
    assert_eq(
        Map::as_string(Map::empty[String, Int]()),
        "Map()"
    )
}

pub fun as_hash() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(
        Map::as_hash(m),
        hash::combine_ord(String::as_hash("A"), Int::as_hash(1))
            |> hash::combine_unord(
                hash::combine_ord(String::as_hash("B"), Int::as_hash(2))
            )
            |> hash::combine_unord(
                hash::combine_ord(String::as_hash("C"), Int::as_hash(3))
            )
    )
    assert_eq(
        Map::as_hash(Map::empty[String, Int]()),
        Map::as_hash(Map::empty[Int, Bool]())
    )
}

pub fun load_factor() {
    assert_eq(Map::load_factor(Map::empty[String, Int]()), 0.75)
    val m: mut Map[String, Int] = Map::empty()
    Map::set_load_factor(m, 1.0)
    assert_eq(Map::load_factor(m), 1.0)
}

pub fun capacity() {
    val m: mut Map[String, Int] = Map::empty()
    assert_eq(Map::capacity(m), 0)
    Map::set(m, "A", 1)
    assert_eq(Map::capacity(m), 16)
    Map::set_capacity(m, 20)
    assert_eq(Map::capacity(m), 20)
}

pub fun size() {
    val a: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::size(a), 3)
    val b: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3),
        Pair("B", 4),
        Pair("A", 5)
    )
    assert_eq(Map::size(b), 3)
    assert_eq(Map::size(Map::empty[String, Int]()), 0)
}

pub fun is_empty() {
    val a: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::is_empty(a), false)
    val b: mut Map[String, Int] = Map::empty()
    Map::set(b, "A", 1)
    Map::set(b, "B", 2)
    Map::set(b, "C", 3)
    Map::set(b, "B", 4)
    Map::set(b, "A", 5)
    assert_eq(Map::is_empty(b), false)
    assert_eq(Map::is_empty(Map::empty[String, Int]()), true)
}

pub fun get() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::get(m, "A"), Option::Some(1))
    assert_eq(Map::get(m, "B"), Option::Some(2))
    assert_eq(Map::get(m, "C"), Option::Some(3))
    assert_eq(Map::get(m, "D"), Option::None)
    assert_eq(Map::get(m, "E"), Option::None)
}

pub fun has() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::has(m, "A"), true)
    assert_eq(Map::has(m, "B"), true)
    assert_eq(Map::has(m, "C"), true)
    assert_eq(Map::has(m, "D"), false)
    assert_eq(Map::has(m, "E"), false)
}

fun present_in[T](in: List[T]) -> Fun(T) -> Bool 
    = |v| in |> List::values() |> Sequence::any(|p| v == p)

pub fun keys() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::values(m) |> Sequence::length(), 3)
    assert_eq(
        Map::keys(m) |> Sequence::all(present_in(List::of("A", "B", "C"))),
        true
    )
    assert_eq(
        Map::empty[String, Int]() 
            |> Map::keys() 
            |> Sequence::length(), 
        0
    )
}

pub fun keys_rep() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    val s = Map::keys_rep(m)
    val order = s |> Stream::take(3) |> List::collect()
    assert_eq(
        order 
            |> List::values() 
            |> Sequence::all(present_in(List::of("A", "B", "C"))),
        true
    )
    val exp = List::values_rep(order)
    assert_eq(
        s |> Stream::take(30) |> Sequence::all(|k| k == Stream::next(exp)),
        true
    )
}

pub fun values() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::values(m) |> Sequence::length(), 3)
    assert_eq(
        Map::values(m) |> Sequence::all(present_in(List::of(1, 2, 3))),
        true
    )
    assert_eq(
        Map::empty[String, Int]() 
            |> Map::values() 
            |> Sequence::length(), 
        0
    )
}

pub fun values_rep() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )   
    val s = Map::values_rep(m)
    val order = s |> Stream::take(3) |> List::collect()
    assert_eq(
        order 
            |> List::values() 
            |> Sequence::all(present_in(List::of(1, 2, 3))),
        true
    )
    val exp = List::values_rep(order)
    assert_eq(
        s |> Stream::take(30) |> Sequence::all(|v| v == Stream::next(exp)),
        true
    )
}

pub fun entries() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::entries(m) |> Sequence::length(), 3)
    assert_eq(
        Map::entries(m) |> Sequence::all(present_in(List::of(
            Pair("A", 1),
            Pair("B", 2),
            Pair("C", 3)
        ))),
        true
    )
    assert_eq(
        Map::empty[String, Int]() 
            |> Map::entries() 
            |> Sequence::length(), 
        0
    )
}

pub fun entries_rep() {
    val m: Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )   
    val s = Map::entries_rep(m)
    val order = s |> Stream::take(3) |> List::collect()
    assert_eq(
        order 
            |> List::values() 
            |> Sequence::all(present_in(List::of(
                Pair("A", 1),
                Pair("B", 2),
                Pair("C", 3)
            ))),
        true
    )
    val exp = List::values_rep(order)
    assert_eq(
        s |> Stream::take(30) |> Sequence::all(|e| e == Stream::next(exp)),
        true
    )
}

pub fun remove() {
    val m: mut Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::size(m), 3)
    assert_eq(Map::remove(m, "A"), Option::Some(1))
    assert_eq(Map::size(m), 2)
    assert_eq(Map::remove(m, "A"), Option::None)
    assert_eq(Map::size(m), 2)
    assert_eq(Map::remove(m, "B"), Option::Some(2))
    assert_eq(Map::size(m), 1)
    assert_eq(Map::remove(m, "C"), Option::Some(3))
    assert_eq(Map::size(m), 0)
    assert_eq(Map::remove(m, "X"), Option::None)
    assert_eq(Map::size(m), 0)
    assert_eq(Map::remove(m, "b"), Option::None)
    assert_eq(Map::size(m), 0)
}

pub fun clear() {
    val m: mut Map[String, Int] = Map::of(
        Pair("A", 1),
        Pair("B", 2),
        Pair("C", 3)
    )
    assert_eq(Map::size(m), 3)
    assert_eq(Map::get(m, "A"), Option::Some(1))
    assert_eq(Map::get(m, "B"), Option::Some(2))
    assert_eq(Map::get(m, "C"), Option::Some(3))
    Map::clear(m)
    assert_eq(Map::size(m), 0)
    assert_eq(Map::get(m, "A"), Option::None)
    assert_eq(Map::get(m, "B"), Option::None)
    assert_eq(Map::get(m, "C"), Option::None)
}