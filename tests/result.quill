
mod std::tests::result

use std::test::*

pub fun as_string() {
    assert_eq(Result::as_string(Result::Ok[Int, String](5)), "Ok(5)")
    assert_eq(Result::as_string(Result::Ok[Int, String](10)), "Ok(10)")
    assert_eq(Result::as_string(Result::Err[Bool, Int](42)), "Err(42)")
}

pub fun as_hash() {
    assert_eq(
        Result::as_hash(Result::Ok[Int, String](5)), 
        Int::as_hash(5)
    )
    assert_eq(
        Result::as_hash(Result::Ok[Int, String](10)), 
        Int::as_hash(10)
    )
    assert_eq(
        Result::as_hash(Result::Err[Int, String]("No value!")), 
        String::as_hash("No value!")
    )
}

pub fun and() {
    assert_eq(
        Result::and[Int, Bool](Result::Ok(25), Result::Ok(10)), 
        Result::Ok(10)
    )
    assert_eq(
        Result::and[Int, Bool](Result::Ok(25), Result::Err(true)), 
        Result::Err(true)
    )
    assert_eq(
        Result::and[Int, Bool](Result::Err(false), Result::Ok(10)), 
        Result::Err(false)
    )
    assert_eq(
        Result::and[Int, Bool](Result::Err(false), Result::Err(true)), 
        Result::Err(false)
    )
}

pub fun and_then() {
    assert_eq(
        Result::and_then[Int, Int, Bool](Result::Ok(15), |x| Result::Ok(x * 2)), 
        Result::Ok(30)
    )
    assert_eq(
        Result::Err(false)
            |> Result::and_then[Int, Int, Bool](|x| assert_unreachable()),
        Result::Err(false)
    )
    assert_eq(
        Result::Ok(25)
            |> Result::and_then[Int, Int, Bool](|x| Result::Err(true)),
        Result::Err(true)
    )
}

pub fun or() {
    assert_eq(
        Result::or[Int, Bool](Result::Ok(25), Result::Ok(10)), 
        Result::Ok(25)
    )
    assert_eq(
        Result::or[Int, Bool](Result::Ok(25), Result::Err(true)), 
        Result::Ok(25)
    )
    assert_eq(
        Result::or[Int, Bool](Result::Err(false), Result::Ok(10)), 
        Result::Ok(10)
    )
    assert_eq(
        Result::or[Int, Bool](Result::Err(false), Result::Err(true)), 
        Result::Err(true)
    )
}

pub fun or_else() {
    assert_eq(
        Result::Ok(25)
            |> Result::or_else[Int, Bool, Bool](|e| assert_unreachable()),
        Result::Ok(25)
    )
    assert_eq(
        Result::Err(false)
            |> Result::or_else[Int, Bool, Bool](|e| Result::Ok(10)), 
        Result::Ok(10)
    )
    assert_eq(
        Result::Err(false)
            |> Result::or_else[Int, Bool, Bool](|e| Result::Err(true)), 
        Result::Err(true)
    )
    assert_eq(
        Result::Err(false)
            |> Result::or_else[Int, Bool, Bool](|e| Result::Err(e)), 
        Result::Err(false)
    )
}

pub fun get_ok() {
    assert_eq(Result::get_ok(Result::Ok[Int, Bool](25)), Option::Some(25))
    assert_eq(Result::get_ok(Result::Err[Int, Bool](false)), Option::None)
}

pub fun get_err() {
    assert_eq(Result::get_err(Result::Ok[Int, Bool](25)), Option::None)
    assert_eq(Result::get_err(Result::Err[Int, Bool](true)), Option::Some(true))
}

pub fun is_ok() {
    assert_eq(Result::is_ok(Result::Ok[Int, Bool](25)), true)
    assert_eq(Result::is_ok(Result::Err[Int, Bool](false)), false)
}

pub fun is_err() {
    assert_eq(Result::is_err(Result::Ok[Int, Bool](25)), false)
    assert_eq(Result::is_err(Result::Err[Int, Bool](false)), true)
}

pub fun ok_seq() {
    val a = Result::ok_seq(Result::Ok[Int, Bool](25))
    assert_eq(Sequence::next(a), Option::Some(25))
    assert_eq(Sequence::next(a), Option::None)
    val b = Result::ok_seq(Result::Err[Int, Bool](false))
    assert_eq(Sequence::next(b), Option::None)
}

pub fun err_seq() {
    val a = Result::err_seq(Result::Ok[Int, Bool](25))
    assert_eq(Sequence::next(a), Option::None)
    val b = Result::err_seq(Result::Err[Int, Bool](false))
    assert_eq(Sequence::next(b), Option::Some(false))
    assert_eq(Sequence::next(b), Option::None)
}

pub fun map() {
    assert_eq(
        Result::Ok[Int, Bool](25) |> Result::map(Int::as_string),
        Result::Ok[String, Bool]("25")
    )
    assert_eq(
        Result::Err[Int, Bool](true) |> Result::map(Int::as_string),
        Result::Err[String, Bool](true)
    )
}

pub fun map_err() {
    assert_eq(
        Result::Ok[Bool, Int](true) |> Result::map_err(Int::as_string),
        Result::Ok[Bool, String](true)
    )
    assert_eq(
        Result::Err[Bool, Int](13) |> Result::map_err(Int::as_string),
        Result::Err[Bool, String]("13")
    )
}

pub fun unwrap_or() {
    assert_eq(
        Result::Ok[Int, String](15) |> Result::unwrap_or(25), 
        15
    )
    assert_eq(
        Result::Err[Int, String]("No value!") |> Result::unwrap_or(25),
        25
    )
}

pub fun unwrap_or_else() {
    assert_eq(
        Result::Ok[Int, String](15) 
            |> Result::unwrap_or_else(|error| assert_unreachable()), 
        15
    )
    assert_eq(
        Result::Err[Int, String]("No value!") 
            |> Result::unwrap_or_else(|error| 25),
        25
    )
}

pub fun unwrap_err_or() {
    assert_eq(
        Result::Ok[Int, String](15) 
            |> Result::unwrap_err_or("Unexpected value!"), 
        "Unexpected value!"
    )
    assert_eq(
        Result::Err[Int, String]("No value!") 
            |> Result::unwrap_err_or("Unexpected value!"),
        "No value!"
    )
}

pub fun unwrap_err_or_else() {
    assert_eq(
        Result::Ok[Int, String](15) 
            |> Result::unwrap_err_or_else(|value| "Unexpected value!"), 
        "Unexpected value!"
    )
    assert_eq(
        Result::Err[Int, String]("No value!") 
            |> Result::unwrap_err_or_else(|value| assert_unreachable()),
        "No value!"
    )
}