
mod std::tests::float

use std::test::*

pub fun as_string() {
    assert_eq(Float::as_string(3.5), "3.5")
    assert_eq(Float::as_string(-1.25), "-1.25")
    assert_eq(Float::as_string(42.0), "42")
    assert_eq(Float::as_string(-1.0), "-1")
    assert_eq(Float::as_string(-0.0), "0")
    assert_eq(Float::as_string(Float::INF), "inf")
    assert_eq(Float::as_string(-Float::INF), "-inf")
    assert_eq(Float::as_string(Float::NAN), "nan")
    assert_eq(Float::as_string(-Float::NAN), "nan")
}

pub fun as_int() {
    assert_eq(Float::as_int(3.5), 3)
    assert_eq(Float::as_int(2.0), 2)
    assert_eq(Float::as_int(4.7), 4)
    assert_eq(Float::as_int(1.1), 1)
    assert_eq(Float::as_int(0.0), 0)
    assert_eq(Float::as_int(-3.7), -3)
    assert_eq(Float::as_int(-2.2), -2)
    assert_eq(Float::as_int(-5.0), -5)
}

pub fun as_radians() {
    assert_eq(Float::as_radians(0.0), 0.0)
    assert_eq(Float::as_radians(45.0), Float::PI / 4.0)
    assert_eq(Float::as_radians(90.0), Float::PI / 2.0)
    assert_eq(Float::as_radians(180.0), Float::PI)
    assert_eq(Float::as_radians(360.0), Float::TAU)
    assert_eq(Float::as_radians(-180.0), -Float::PI)
}

pub fun as_degrees() {
    assert_eq(Float::as_degrees(0.0), 0.0)
    assert_eq(Float::as_degrees(Float::PI / 4.0), 45.0)
    assert_eq(Float::as_degrees(Float::PI / 2.0), 90.0)
    assert_eq(Float::as_degrees(Float::PI), 180.0)
    assert_eq(Float::as_degrees(Float::TAU), 360.0)
    assert_eq(Float::as_degrees(-Float::PI), -180.0)
}

pub fun abs() {
    assert_eq(Float::abs(0.0), 0.0)
    assert_eq(Float::abs(36.3), 36.3)
    assert_eq(Float::abs(-2.5), 2.5)
    assert_eq(Float::abs(Float::INF), Float::INF)
    assert_eq(Float::abs(-Float::INF), Float::INF)
    assert_eq(Float::is_nan(Float::abs(Float::NAN)), true)
}

pub fun max() {
    assert_eq(Float::max(3.5, 1.25), 3.5)
    assert_eq(Float::max(-2.0, 0.5), 0.5)
    assert_eq(Float::max(3.0, 0.0), 3.0)
    assert_eq(Float::max(-10.35, -8.4), -8.4)
}

pub fun min() {
    assert_eq(Float::min(3.5, 1.25), 1.25)
    assert_eq(Float::min(-2.0, 0.5), -2.0)
    assert_eq(Float::min(3.0, 0.0), 0.0)
    assert_eq(Float::min(-10.35, -8.4), -10.35)
}

pub fun clamp() {
    assert_eq(3.0 |> Float::clamp(-2.5, 1.25), 1.25)
    assert_eq(-5.0 |> Float::clamp(-2.5, 1.25), -2.5)
    assert_eq(1.0 |> Float::clamp(-2.5, 1.25), 1.0)
    assert_eq(5.0 |> Float::clamp(1.0, 1.0), 1.0)
}

pub fun sign() {
    assert_eq(Float::sign(1.25), 1.0)
    assert_eq(Float::sign(-3.0), -1.0)
    assert_eq(Float::sign(0.0), 0.0)
    assert_eq(Float::sign(42.2451), 1.0)
    assert_eq(Float::sign(Float::INF), 1.0)
    assert_eq(Float::sign(-Float::INF), -1.0)
    assert_eq(Float::is_nan(Float::sign(Float::NAN)), true)
}

pub fun parse() {
    assert_eq(Float::parse("3.14"), Option::Some(3.14))
    assert_eq(Float::parse("inf"), Option::Some(Float::INF))
    assert_eq(Float::parse("-inf"), Option::Some(-Float::INF))
    assert_eq(Float::parse("215"), Option::Some(215.0))
    assert_eq(Float::parse("-2.05"), Option::Some(-2.05))
    assert_eq(Float::parse(".0"), Option::Some(0.0))
    assert_eq(Float::parse("yay"), Option::None)
    assert_eq(Float::parse("3.1avas"), Option::None)
    assert_eq(Float::parse("basc"), Option::None)
    assert_eq(Float::parse("64.128e3"), Option::Some(64128.0))
    assert_eq(Float::parse("5e-2"), Option::Some(0.05))
}