
mod std::tests::stream

use std::test::*

pub fun of() {
    val a = Stream::of(5)
    assert_eq(Stream::next(a), 5)
    assert_eq(Stream::next(a), 5)
    assert_eq(Stream::next(a), 5)
    // ... and so on ...
    val b = Stream::of(true)
    assert_eq(Stream::next(b), true)
    assert_eq(Stream::next(b), true)
    assert_eq(Stream::next(b), true)
    // ... and so on ...
}

pub fun zip() {
    val a = std::count_up_from(1)
    val b = Stream::of(3)
    val s: mut Stream[Int] = Stream::zip(a, b, |x, y| x * y)
    assert_eq(Stream::next(s), 3)
    assert_eq(Stream::next(s), 6)
    assert_eq(Stream::next(s), 9)
    // ... and so on ...
}

pub fun map() {
    val s: mut Stream[Int] = std::count_up_from(10)
        |> Stream::map(|n| n * 3)
    assert_eq(Stream::next(s), 30)
    assert_eq(Stream::next(s), 33)
    assert_eq(Stream::next(s), 36)
    // ... and so on ...
}

pub fun skip() {
    val s = std::count_up_from(10)
    assert_eq(Stream::next(s), 10)
    Stream::skip(s, 5)
    assert_eq(Stream::next(s), 16)
    assert_eq(Stream::next(s), 17)
    assert_eq(Stream::next(s), 18)
    // ... and so on ...
}

pub fun take() {
    val s = std::count_up_from(10)
        |> Stream::take(3)
    assert_eq(Sequence::next(s), Option::Some(10))
    assert_eq(Sequence::next(s), Option::Some(11))
    assert_eq(Sequence::next(s), Option::Some(12))
    assert_eq(Sequence::next(s), Option::None)
}

pub fun take_while() {
    val s = std::count_up_from(10)
        |> Stream::take_while(|n| n < 100)
    assert_eq(Sequence::last(s), Option::Some(99))
}

pub fun take_until() {
    val s = std::count_up_from(10)
        |> Stream::take_until(|n| n > 42)
    assert_eq(Sequence::last(s), Option::Some(42))
}

pub fun flatten() {
    val sequences = List::of[Fun() -> mut Sequence[Int]](
        || List::of(1, 2) |> List::values(),
        || Sequence::empty[Int](),
        || List::of(3, 4, 5) |> List::values()
    )
    assert_eq(
        sequences 
            |> List::values_rep()
            |> Stream::map(|f| f()) 
            |> Stream::flatten[Int]()
            |> Stream::take(12)
            |> List::collect(),
        List::of(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2)
    )
}

pub fun filter() {
    val s = std::count_up_from(1)
        |> Stream::filter(|n| n % 2 == 0)
    assert_eq(Stream::next(s), 2)
    assert_eq(Stream::next(s), 4)
    assert_eq(Stream::next(s), 6)
    // ... and so on ...
}