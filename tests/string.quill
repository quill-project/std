
mod std::tests::string

use std::test::*

pub fun slice() {
    val s = "Hello"
    assert_eq(String::slice(s, 0, 4), "Hell")
    assert_eq(String::slice(s, 0, -1), "Hell")
    assert_eq(String::slice(s, -4, -2), "el")
}

pub fun concat() {
    assert_eq(String::concat("ABC", "DEF"), "ABCDEF")
    assert_eq(String::concat("", "lol"), "lol")
    assert_eq(String::concat("", ""), "")
    assert_eq(String::concat("abcdefgh", "!"), "abcdefgh!")
}

pub fun length() {
    assert_eq(String::length("Hello"), 5)
    assert_eq(String::length("yay"), 3)
    assert_eq(String::length(""), 0)
}

pub fun as_code() {
    assert_eq(String::as_code("A"), 65)
    assert_eq(String::as_code("游때"), 128513)
}

pub fun from_code() {
    assert_eq(String::from_code(87), "W")
    assert_eq(String::from_code(128513), "游때")
}

pub fun chars() {
    assert_eq(
        String::chars("Hi! 游때") |> List::collect(),
        List::of("H", "i", "!", " ", "游때")
    )
}

pub fun chars_rep() {
    assert_eq(
        String::chars_rep("Hi! 游때") |> Stream::take(10) |> List::collect(),
        List::of("H", "i", "!", " ", "游때", "H", "i", "!", " ", "游때")
    )
}

pub fun as_string() {
    assert_eq(String::as_string("fun!"), "fun!")
    assert_eq(String::as_string("yay"), "yay")
    assert_eq(String::as_string("yippie!"), "yippie!")
}

pub fun as_hash() {
    assert_eq(
        String::as_hash("hey"),
        String::as_code("h")
            |> hash::combine_ord(String::as_code("e"))
            |> hash::combine_ord(String::as_code("y"))
    )
    assert_eq(
        String::as_hash("nice"), String::as_hash("nice")
    )
    assert_eq(String::as_hash(""), String::as_hash(""))
}

pub fun join() {
    assert_eq(
        List::of("1", "2", "3")
            |> List::values()
            |> String::join(", "),
        "1, 2, 3"
    )
    assert_eq(
        List::of("A", "B", "C", "D")
            |> List::values()
            |> String::join(""),
        "ABCD"
    )
}

pub fun indices() {
    assert_eq(
        "Hello!" |> String::indices() |> List::collect(),
        List::of(0, 1, 2, 3, 4, 5)
    )
    assert_eq(
        "" |> String::indices() |> List::collect(),
        List::of[Int]()
    )
}

pub fun indices_rep() {
    assert_eq(
        "Hello!"
            |> String::indices_rep()
            |> Stream::take(14)
            |> List::collect(),
        List::of(0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1)
    )
}

pub fun codes() {
    assert_eq(
        String::codes("Hi! 游때") |> List::collect(),
        List::of(72, 105, 33, 32, 128513)
    )
}

pub fun codes_rep() {
    assert_eq(
        String::codes_rep("游때!") |> Stream::take(8) |> List::collect(),
        List::of(128513, 33, 128513, 33, 128513, 33, 128513, 33)
    )
}

pub fun get() {
    val s = "Hello, world!"
    assert_eq(String::get(s, 0), Option::Some("H"))
    assert_eq(String::get(s, -1), Option::Some("!"))
    assert_eq(String::get(s, -3), Option::Some("l"))
    assert_eq(String::get(s, 5), Option::Some(","))
    assert_eq(String::get(s, -20), Option::None)
    assert_eq(String::get(s, 14), Option::None)
}

pub fun slice_from() {
    val s = "Hello, world!"
    assert_eq(String::slice_from(s, 7), "world!")
    assert_eq(String::slice_from(s, -1), "!")
    assert_eq(String::slice_from(s, 0), "Hello, world!")
}

pub fun slice_to() {
    val s = "Hello, world!"
    assert_eq(String::slice_to(s, 5), "Hello")
    assert_eq(String::slice_to(s, -1), "Hello, world")
    assert_eq(String::slice_to(s, 4), "Hell")
}

pub fun starts_with() {
    assert_eq(String::starts_with("Hello, world!", "Hell"), true)
    assert_eq(String::starts_with("Hello, world!", "world"), false)
    assert_eq(String::starts_with("Hello, world!", ""), true)
}

pub fun ends_with() {
    assert_eq(String::ends_with("Hello, world!", "!"), true)
    assert_eq(String::ends_with("Hello, world!", "world!"), true)
    assert_eq(String::ends_with("Hello, world!", ""), true)
    assert_eq(String::ends_with("Hello, world!", "yay"), false)
}

pub fun find() {
    assert_eq(
        String::find("Hello, world!", "l") |> List::collect(),
        List::of(2, 3, 10)
    )
    assert_eq(
        String::find("Hi", "") |> List::collect(),
        List::of(0, 1, 2)
    )
    assert_eq(
        String::find("aaaaaa", "aa") |> List::collect(), 
        List::of(0, 2, 4)
    )
}

pub fun find_all() {
    assert_eq(
        String::find_all("Hello, world!", "l") |> List::collect(),
        List::of(2, 3, 10)
    )
    assert_eq(
        String::find_all("Hi", "") |> List::collect(),
        List::of(0, 1, 2)
    )
    assert_eq(
        String::find_all("aaaaaa", "aa") |> List::collect(), 
        List::of(0, 1, 2, 3, 4)
    )
}

pub fun fmt() {
    assert_eq(
        "Hello, _!" |> String::fmt("world"), 
        "Hello, world!"
    )
    assert_eq(
        "_ * _ = _" |> String::fmt("2", "3", "6"),
        "2 * 3 = 6"
    )
    assert_eq(
        "Your name is _...? -_-" |> String::fmt("Bob"),
        "Your name is Bob...? -_-"
    )
}

pub fun repeat() {
    assert_eq(String::repeat("hi", 5), "hihihihihi")
    assert_eq(String::repeat("hi", 0), "")
    assert_eq(String::repeat("", 10), "")
    assert_eq(String::repeat(".", 3), "...")
}

pub fun repeat_to() {
    assert_eq(String::repeat_to("hi", 5), "hihih")
    assert_eq(String::repeat_to("hi", 0), "")
    assert_eq(String::repeat_to("hi", 1), "h")
    assert_eq(String::repeat_to(".", 3), "...")
}

pub fun pad_begin() {
    assert_eq(String::pad_begin("Hi!", 7, "."), "....Hi!")
    assert_eq(String::pad_begin("!!", 7, "hi"), "hihih!!")
    assert_eq(String::pad_begin(":)", 10, "lol"), "lollollo:)")
}

pub fun pad_end() {
    assert_eq(String::pad_end("Hi!", 7, "."), "Hi!....")
    assert_eq(String::pad_end("!!", 7, "hi"), "!!hihih")
    assert_eq(String::pad_end(":)", 10, "lol"), ":)lollollo")
}

pub fun split() {
    assert_eq(
        String::split("Hello, world!", ", ") |> List::collect(),
        List::of("Hello", "world!")
    )
    assert_eq(
        String::split(".1.2.3.", ".") |> List::collect(),
        List::of("", "1", "2", "3", "")
    )
    assert_eq(
        String::split("You are   awesome! ", " ") |> List::collect(),
        List::of("You", "are", "", "", "awesome!", "")
    )
}

pub fun replace() {
    assert_eq(String::replace("Hello, world!", "!", "?"), "Hello, world?")
    assert_eq(String::replace("Hello, world!", "l", "L"), "HeLLo, worLd!")
    assert_eq(String::replace("Hello, world!", "q", "."), "Hello, world!")
    assert_eq(String::replace("Hello, world!", "H", "h"), "hello, world!")
}