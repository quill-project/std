
mod std

struct Stream[T](next: Fun() -> T)

pub fun Stream::new[T](next: Fun() -> T) -> mut Stream[T] = Stream(next)

pub fun Stream::of[T](value: T) -> mut Stream[T] = Stream(|| value) 

pub fun Stream::zip[A, B, O](a: mut Stream[A], b: mut Stream[B], f: Fun(A, B) -> O) -> mut Stream[O]
    = Stream::new(|| f(a |> next(), b |> next()))

pub fun Stream::map[I, O](self: mut Stream[I], f: Fun(I) -> O) -> mut Stream[O]
    = Stream::new(|| f(self |> next()))

pub fun Stream::skip[T](self: mut Stream[T], n: Int) -> mut Stream[T] {
    self |> take(n) |> for_each(|v| {})
    return self
}

pub fun Stream::take[T](self: mut Stream[T], n: Int) -> mut Sequence[T] {
    mut i = 0
    return Sequence::new(|| {
        if i >= n { return Option::None }
        i = i + 1
        return Option::Some(self |> next())
    })
}

pub fun Stream::take_while[T](self: mut Stream[T], cond: Fun(T) -> Bool) -> mut Sequence[T] {
    mut ended = false
    return Sequence::new(|| {
        if ended { return Option::None }
        val n = self |> next()
        ended = !cond(n)
        return if ended { Option::None[T] } else { Option::Some(n) }
    })
}

pub fun Stream::take_until[T](self: mut Stream[T], cond: Fun(T) -> Bool) -> mut Sequence[T] {
    mut ended = false
    return Sequence::new(|| {
        if ended { return Option::None }
        val n = self |> next()
        ended = cond(n)
        return if ended { Option::None[T] } else { Option::Some(n) }
    })
}

// For every requested item the stream returned by this function will attempt
// to find a sequence returned by 'self' which can provide a next value,
// resulting in a new stream that contains all values of all the sequences
// returned by 'self' in their respective order.
//
// Important!
//
// Note that because the returned stream will keep polling 'self' for a
// non-empty sequence, the stream returned by this function 
// will keep calling 'self' FOREVER if all of the sequences returned by 'self' 
// are empty, resulting in the stream never actually returning.
// To avoid this, you can convert the stream to a finite sequence using
// 'std::Stream::take', 'std::Stream::take_while' or 'std::Stream::take_until'
// and then use 'std::Sequence::flatten' instead, which can simply return after
// reaching the end of the sequence and therefore does not have this issue.
//
// While using this function, also be aware that sequences are passed by reference,
// meaning that if 'self' repeatedly returns the same sequence objects
// this function will fully exhaust each of them once, after which they will
// be empty, resulting in the function looping forever (as described above)
// since all of them are empty.
// An example of this is having a list of sequence objects, converting
// it to a sequence and then using this function on the result:
// `List::values_rep(List::of(List::values(List::of(1, 2)), List::values(List::of(3, 4))))`
// The list stores references to the sequences it contains, and `List::values_rep`
// naturally won't construct new sequences, but repeatedly return those same references.
// To avoid this, store functions that construct the sequences instead,
// create a stream of those and use 'std::Stream::map' to actually construct
// them on demand.
pub fun Stream::flatten[T](self: mut Stream[mut Sequence[T]]) -> mut Stream[T] {
    mut inner: mut Sequence[T] = self |> next()
    return Stream::new(|| {
        mut value: Option[T] = Option::None
        Sequence::new[Unit](|| {
            if value |> is_some() { return Option::None }
            value = inner |> next()
            if value |> is_some() { return Option::None }
            inner = self |> next()
            return Option::Some(unit)
        }) |> for_each(|_| {})
        return value |> expect("loop only exits if is some")
    })
}

pub fun Stream::next[T](self: mut Stream[T]) -> T = self.next()

// For every requested item the stream returned by this function will attempt
// to find and return the next value in 'self' for which the function 'cond'
// returns true.
//
// Important!
//
// Note that because the returned stream will keep polling 'self' for a value
// that meets the provided condition, the stream returned by this function
// will keep calling 'self' FOREVER if none of the elements in 'self' ever
// meet the condition.
// To avoid this, you can convert the stream to a finite sequence using
// 'std::Stream::take', 'std::Stream::take_while' or 'std::Stream::take_until'
// and then use 'std::Sequence::filter' instead, which can simply return after
// reaching the end of the sequence and therefore does not have this issue.
pub fun Stream::filter[T](self: mut Stream[T], cond: Fun(T) -> Bool) -> mut Stream[T] 
    = Stream::new(|| {
        mut current = self |> next()
        Sequence::new[Unit](|| {
            if cond(current) { return Option::None }
            current = self |> next()
            return Option::Some
        }) |> for_each(|n| {})
        return current
    })