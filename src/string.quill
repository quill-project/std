
mod std

// ext fun String::slice_unchecked(self: String, start: Int, end: Int) -> String
// ext fun String::slice_from_unchecked(self: String, start: Int) -> String
// pub ext fun String::concat(low: String, high: String) -> String    // MUST ALWAYS ALLOCATE A NEW STRING!
// pub ext fun String::length(self: String) -> Int
// ext fun String::as_code_unchecked(self: String) -> Int
// ext fun String::from_code_unchecked(code: Int) -> String
// pub fun String::chars(self: String) -> mut Sequence[String]
// pub fun String::chars_rep(self: String) -> mut Stream[String]

pub fun String::is_empty(self: String) -> Bool = (self |> length()) == 0

pub fun String::as_string(self: String) -> String = self

pub fun String::as_hash(self: String) -> Int = self
    |> codes()
    |> reduce(hash::combine_ord)
    |> unwrap_or(0)

pub fun String::clone(self: String) -> String = self

pub fun String::join(from: mut Sequence[String], delim: String) -> String {
    val r: mut StringBuilder = from
        |> next() |> unwrap_or("")
        |> StringBuilder::of()
    from |> for_each(|v| {
        r |> push(delim)
        r |> push(v)
    })
    return r |> as_string()
}

pub fun String::indices(self: String) -> mut Sequence[Int] 
    = range(0, self |> length())

pub fun String::indices_rep(self: String) -> mut Stream[Int] {
    if 0 == (self |> length()) {
        return panic("Attempt to get index stream from empty string!")
    }
    return count_up_from(0)
        |> map(|i| i % (self |> length()))
}

pub fun String::indices_rev(self: String) -> mut Sequence[Int]
    = range_down_incl((self |> length()) - 1, 0)

pub fun String::codes(self: String) -> mut Sequence[Int] = self
    |> chars()
    |> map(String::as_code_unchecked)

pub fun String::codes_rep(self: String) -> mut Stream[Int] = self
    |> chars_rep()
    |> map(String::as_code_unchecked)

pub fun String::from_code(code: Int) -> String {
    if code >= 0 {
        return String::from_code_unchecked(code)
    }
    return "Attempt to convert negative code _ to a string"
        |> fmt(Int::as_string(code))
        |> panic()
}

pub fun String::as_code(self: String) -> Int {
    if (self |> length()) > 0 {
        return self |> as_code_unchecked()
    }
    return panic("Attempt to turn empty string into code")
}

pub fun String::get(self: String, position: Int) -> Option[String] {
    val len: Int = self |> length()
    val i: Int = if position >= 0 { position } else { len + position }
    return if i < 0 || i >= len { Option::None[String] }
        else { Option::Some(self |> slice_unchecked(i, i + 1)) }
}

pub fun String::at(self: String, position: Int) -> String = self 
    |> get(position) 
    |> unwrap_or_else(
        || "Attempt to read from string at position _, which is out of bounds for length _"
        |> fmt(Int::as_string(position), Int::as_string(self |> length()))
        |> panic()
    )

pub fun String::slice(self: String, start: Int, end: Int) -> String {
    val len: Int = self |> length()
    val s: Int = if start >= 0 { start } else { len + start }
    val e: Int = if end >= 0 { end } else { len + end }
    if s < 0 || s > len {
        return "Attempt to slice string starting from position _, which is out of bounds for length _"
            |> fmt(Int::as_string(start), Int::as_string(len))
            |> panic()
    }
    if e < 0 || e > len {
        return "Attempt to slice string up to position _, which is out of bounds for length _"
            |> fmt(Int::as_string(end), Int::as_string(len))
            |> panic()
    }
    if s > e {
        return "Attempt to slice string from position _ up to position _, which is in descending order for length _"
            |> fmt(Int::as_string(start), Int::as_string(end), Int::as_string(len))
            |> panic()
    }
    return self |> slice_unchecked(s, e)
}

pub fun String::slice_from(self: String, start: Int) -> String {
    val len: Int = self |> length()
    val s: Int = if start >= 0 { start } else { len + start }
    if s < 0 || s > len {
        return "Attempt to slice string starting from position _, which is out of bounds for length _"
            |> fmt(Int::as_string(start), Int::as_string(len))
            |> panic()
    }
    return self |> slice_from_unchecked(s)
}

pub fun String::slice_to(self: String, end: Int) -> String {
    val len: Int = self |> length()
    val e: Int = if end >= 0 { end } else { len + end }
    if e < 0 || e > len {
        return "Attempt to slice string up to position _, which is out of bounds for length _"
            |> fmt(Int::as_string(end), Int::as_string(len))
            |> panic()
    }
    return self |> slice_unchecked(0, e)
}

pub fun String::starts_with(self: String, prefix: String) -> Bool {
    val pl = prefix |> length()
    if pl > (self |> length()) { return false }
    return prefix == (self |> slice_unchecked(0, pl))
}

pub fun String::ends_with(self: String, suffix: String) -> Bool {
    val l = self |> length()
    val sl = suffix |> length()
    if l < sl { return false }
    return suffix == (self |> slice_unchecked(l - sl, l))
}

pub fun String::find(self: String, sub: String) -> mut Sequence[Int] {
    val l = self |> length()
    val sl = sub |> length()
    if sl == 0 { return range_incl(0, l) }
    mut i = 0
    return Sequence::new(|| {
        i = range_incl(i, l - sl)
            |> find(|j| sub == (self |> slice_unchecked(j, j + sl)))
            |> unwrap_or(l)
        if i >= l { return Option::None }
        val r = i
        i = i + sl
        return Option::Some(r)
    })
}

// Version of 'String::find' that also includes overlapping results
pub fun String::find_all(self: String, sub: String) -> mut Sequence[Int] {
    val l = self |> length()
    val sl = sub |> length()
    return range_incl(0, l - sl)
        |> filter(|i| sub == (self |> slice_unchecked(i, i + sl)))
}

pub fun String::fmt(self: String, ...inserted: List[String]) -> String {
    val v = inserted |> values()
    val out = self
        |> split("_")
        |> reduce(|acc, e| acc
            |> concat(v |> next() |> unwrap_or("_"))
            |> concat(e)
        )
        |> unwrap_or("")
    if v |> next() |> is_none() { return out }
    return "The pattern '" 
        |> concat(self) 
        |> concat("' does not make use of all provided values (")
        |> concat(inserted |> length() |> as_string())
        |> concat(")!")
        |> panic()
}

pub fun String::repeat(self: String, n: Int) -> String {
    val r = StringBuilder::empty()
    range(0, n) |> for_each(|_| r |> push(self))
    return r |> as_string()
}

pub fun String::repeat_to(self: String, n: Int) -> String {
    val l = self |> length()
    if l == 0 {
        return panic("Attempt to repeat an empty string until a certain length")
    }
    return self 
        |> repeat(n / l + 1)
        |> slice_unchecked(0, n)
}

pub fun String::pad_begin(self: String, tgt_len: Int, padding: String) -> String {
    if tgt_len <= (self |> length()) { return self }
    if 0 == (padding |> length()) { return self }
    return padding
        |> repeat_to(tgt_len - (self |> length()))
        |> concat(self)
}

pub fun String::pad_end(self: String, tgt_len: Int, padding: String) -> String {
    if tgt_len <= (self |> length()) { return self }
    if 0 == (padding |> length()) { return self }
    val p = padding |> repeat_to(tgt_len - (self |> length()))
    return self |> concat(p)
}

pub fun String::split(self: String, delim: String) -> mut Sequence[String] {
    val dl = delim |> length()
    if dl == 0 {
        return panic("Attempt to split a string with an empty delimiter!")
    }
    mut rem: String = self
    mut ended: Bool = false
    return Sequence::new(|| {
        if ended { return Option::None }
        val rem_before: String = rem
        val rem_before_l: Int = rem |> length()
        Stream::new[String](|| rem)
            |> take_while(|r| (r |> length()) > 0)
            |> take_until(|r| r |> starts_with(delim))
            |> for_each(|r| {
                rem = r |> slice_from(1)
            })
        val rem_l: Int = rem |> length()
        val sliced_l: Int = rem_before_l - rem_l
        val sliced: String = rem_before |> slice_to(sliced_l)
        if rem_l > 0 {
            rem = rem |> slice_from(dl)
        } else {
            ended = true
        }
        return Option::Some(sliced)
    })
}

pub fun String::replace(self: String, at: String, with: String) -> String
    = self |> split(at) |> join(with)