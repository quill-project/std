
mod std

struct Map[K, V](
    load_factor: Float,
    size: Int,
    buckets: mut List[mut List[Pair[K, V]]]
)

// creation

pub fun Map::empty[K, V]() -> mut Map[K, V] 
    = Map[K, V](0.75, 0, List::empty())

pub fun Map::of[K, V](...entries: List[Pair[K, V]]) -> mut Map[K, V] {
    val r: mut Map[K, V] = Map::empty()
    r |> set_capacity(entries |> length())
    entries |> values() |> for_each(|entry| { r |> add(entry) })
    return r
}

pub fun Map::collect[K, V](from: mut Sequence[Pair[K, V]]) -> mut Map[K, V] {
    val r: mut Map[K, V] = Map::empty()
    from |> for_each(|entry| { r |> add(entry) })
    return r
}

pub fun Map::clone[K, V](self: Map[K, V]) -> mut Map[K, V] 
    = Map(
        self.load_factor,
        self.size,
        self.buckets |> clone()
    )

// modification

pub fun Map::set_load_factor[K, V](self: mut Map[K, V], load_factor: Float) {
    if load_factor <= 0.0 {
        return panic("Attempt to specify load factor of zero or lower")
    }
    self.load_factor = load_factor
}

pub fun Map::set_capacity[K, V](self: mut Map[K, V], capacity: Int) {
    if capacity <= (self.buckets |> length()) { return unit }
    val entries = self.buckets 
        |> values()
        |> map[List[Pair[K, V]], mut Sequence[Pair[K, V]]](List::values)
        |> flatten()
    self.size = 0
    self.buckets = Stream::new[mut List[Pair[K, V]]](|| List::empty()) 
        |> take(capacity)
        |> List::collect()
    entries |> for_each(|entry| { self |> add(entry) })
}

pub fun Map::add[K, V](self: mut Map[K, V], entry: Pair[K, V]) -> Option[V] {
    if 0 == (self.buckets |> length()) { self |> set_capacity(16) }
    val capacity = self.buckets |> length()
    val bucket_i = Int::abs(K::as_hash(entry.first)) % capacity
    val bucket = self.buckets |> at(bucket_i)
    val replaced = bucket |> indices()
        |> find(|i| (bucket |> at(i)).first == entry.first)
        |> map[Int, Option[V]](|i| {
            val replaced = (bucket |> at(i)).second
            bucket |> set(i, entry)
            return Option::Some(replaced)
        })
        |> unwrap_or_else(|| {
            bucket |> push(entry)
            self.size = self.size + 1
            return Option::None
        })
    val threshold = Float::as_int(Int::as_float(capacity) * self.load_factor)
    if self.size > threshold { self |> set_capacity(capacity * 2) }
    return replaced
}

pub fun Map::set[K, V](self: mut Map[K, V], key: K, value: V) -> Option[V]
    = self |> add(Pair(key, value))

// access

pub fun Map::eq[K, V](lhs: Map[K, V], rhs: Map[K, V]) -> Bool {
    if (lhs |> size()) != (rhs |> size()) { return false }
    // no need to check if all values of 'rhs' are in 'lhs', 
    // since size is the same 'rhs' can't have any extras
    return lhs 
        |> entries() 
        |> all(|a| rhs 
            |> get(a.first) 
            |> map[V, Bool](|b_v| a.second == b_v)
            |> unwrap_or(false)
        )
}

pub fun Map::not_eq[K, V](lhs: Map[K, V], rhs: Map[K, V]) -> Bool 
    = !Map::eq(lhs, rhs)

pub fun Map::as_string[K, V](self: Map[K, V]) -> String {
    val contents = self 
        |> entries() 
        |> map[Pair[K, V], String](|entry| "_ -> _" |> fmt(
            K::as_string(entry.first),
            V::as_string(entry.second)
        )) 
        |> join(", ")
    return "Map(" |> concat(contents) |> concat(")")
}

pub fun Map::as_hash[K, V](self: Map[K, V]) -> Int = self 
    |> entries() 
    |> map(Pair::as_hash[K, V]) 
    |> reduce(hash::combine_unord) 
    |> unwrap_or(0)

pub fun Map::load_factor[K, V](self: Map[K, V]) -> Float 
    = self.load_factor

pub fun Map::capacity[K, V](self: Map[K, V]) -> Int 
    = self.buckets |> length()

pub fun Map::size[K, V](self: Map[K, V]) -> Int
    = self.size

pub fun Map::is_empty[K, V](self: Map[K, V]) -> Bool 
    = self.size == 0

pub fun Map::get[K, V](self: Map[K, V], key: K) -> Option[V] {
    if 0 == (self.buckets |> length()) { return Option::None }
    val bucket_i = Int::abs(K::as_hash(key)) % (self.buckets |> length())
    return self.buckets |> at(bucket_i) |> values()
        |> find(|e| e.first == key)
        |> map(|e| e.second)
}

pub fun Map::has[K, V](self: Map[K, V], key: K) -> Bool
    = self |> get(key) |> is_some()

pub fun Map::keys[K, V](self: Map[K, V]) -> mut Sequence[K]
    = self.buckets 
    |> values()
    |> map[List[Pair[K, V]], mut Sequence[K]](|b| b 
        |> values() 
        |> map(|e| e.first)
    )
    |> flatten()

pub fun Map::keys_rep[K, V](self: Map[K, V]) -> mut Stream[K] {
    if self.size == 0 {
        return panic("Attempt to get stream from empty map!")
    }
    return self.buckets
        |> values_rep()
        |> map[List[Pair[K, V]], mut Sequence[K]](|b| b 
            |> values() 
            |> map(|e| e.first)
        )
        |> flatten()
}

pub fun Map::values[K, V](self: Map[K, V]) -> mut Sequence[V] = self
    |> keys()
    |> map(|k| self 
        |> get(k) 
        |> expect("Map modified during iteration!")
    )

pub fun Map::values_rep[K, V](self: Map[K, V]) -> mut Stream[V] = self
    |> keys_rep()
    |> map(|k| self 
        |> get(k) 
        |> expect("Map modified during iteration!")
    )

pub fun Map::entries[K, V](self: Map[K, V]) -> mut Sequence[mut Pair[K, V]] = self 
    |> keys() 
    |> map(|k| {
        val v = self |> get(k) |> expect("Map modified during iteration!")
        return Pair(k, v)
    })

pub fun Map::entries_rep[K, V](self: Map[K, V]) -> mut Stream[mut Pair[K, V]] = self 
    |> keys_rep() 
    |> map(|k| {
        val v = self |> get(k) |> expect("Map modified during iteration!")
        return Pair(k, v)
    })

// removal

pub fun Map::remove[K, V](self: mut Map[K, V], key: K) -> Option[V] {
    if 0 == (self.buckets |> length()) { return Option::None }
    val bucket_i = Int::abs(K::as_hash(key)) % (self.buckets |> length())
    val bucket = self.buckets |> at(bucket_i)
    return bucket 
        |> indices()
        |> find(|i| (bucket |> at(i)).first == key)
        |> map(|i| {
            self.size = self.size - 1
            return (bucket |> remove(i)).second
        })
}

pub fun Map::clear[K, V](self: mut Map[K, V]) {
    self.size = 0
    self.buckets = Stream::new[mut List[Pair[K, V]]](|| List::empty()) 
        |> take(self.buckets |> length()) 
        |> List::collect()
}

