
mod std

struct Set[T](
    load_factor: Float,
    size: Int,
    buckets: mut List[mut List[T]]
)

// creation

pub fun Set::empty[T]() -> mut Set[T] = Set[T](0.75, 0, List::empty())

pub fun Set::of[T](...vals: List[T]) -> mut Set[T] {
    val r: mut Set[T] = Set::empty()
    r |> set_capacity(vals |> length())
    vals |> values() |> for_each(|v| { r |> add(v) })
    return r
}

pub fun Set::collect[T](from: mut Sequence[T]) -> mut Set[T] {
    val r: mut Set[T] = Set::empty()
    from |> for_each(|v| { r |> add(v) })
    return r
}

pub fun Set::clone[T](self: Set[T]) -> Set[T] 
    = Set(
        self.load_factor, 
        self.size, 
        self.buckets |> clone()
    )

// modification

pub fun Set::set_load_factor[T](self: mut Set[T], load_factor: Float) {
    if load_factor <= 0.0 {
        return panic("Attempt to specify load factor of zero or lower")
    }
    self.load_factor = load_factor
}

pub fun Set::set_capacity[T](self: mut Set[T], capacity: Int) {
    if capacity <= (self.buckets |> length()) { return unit }
    val vals = self.buckets
        |> values()
        |> map(List::values[T])
        |> flatten()
    self.size = 0
    self.buckets = Stream::new[mut List[T]](|| List::empty())
        |> take(capacity)
        |> List::collect()
    vals |> for_each(|v| { self |> add(v) })
}

pub fun Set::add[T](self: mut Set[T], value: T) -> Bool {
    if (self.buckets |> length()) == 0 { self |> set_capacity(16) }
    val capacity = self.buckets |> length()
    val bucket_i = Int::abs(T::as_hash(value)) % capacity
    val bucket = self.buckets |> at(bucket_i)
    val added = bucket |> indices()
        |> find(|i| (bucket |> at(i)) == value)
        |> map[Int, Bool](|i| {
            bucket |> set(i, value)
            return false
        })
        |> unwrap_or_else(|| {
            bucket |> push(value)
            self.size = self.size + 1
            return true
        })
    val threshold = Float::as_int(Int::as_float(capacity) * self.load_factor)
    if self.size > threshold { self |> set_capacity(capacity * 2) }
    return added
}

// access

pub fun Set::eq[T](lhs: Set[T], rhs: Set[T]) -> Bool {
    if (lhs |> size()) != (rhs |> size()) { return false }
    // no need to check if all values of 'rhs' are in 'lhs', 
    // since size is the same 'rhs' can't have any extras
    return lhs 
        |> values() 
        |> all(|v| rhs |> has(v))
}

pub fun Set::not_eq[T](lhs: Set[T], rhs: Set[T]) -> Bool 
    = !Set::eq(lhs, rhs)

pub fun Set::as_string[T](self: Set[T]) -> String {
    val contents = self
        |> values()
        |> map(T::as_string)
        |> join(", ")
    return "Set(" |> concat(contents) |> concat(")")
}

pub fun Set::as_hash[T](self: Set[T]) -> Int = self
    |> values()
    |> map(T::as_hash)
    |> reduce(hash::combine_unord)
    |> unwrap_or(0)

pub fun Set::load_factor[T](self: Set[T]) -> Float = self.load_factor

pub fun Set::capacity[T](self: Set[T]) -> Int = self.buckets |> length()

pub fun Set::size[T](self: Set[T]) -> Int = self.size

pub fun Set::is_empty[T](self: Set[T]) -> Bool = self.size == 0

pub fun Set::has[T](self: Set[T], value: T) -> Bool {
    if (self.buckets |> length()) == 0 { return false }
    val bucket_i = Int::abs(T::as_hash(value)) % (self.buckets |> length())
    return self.buckets 
        |> at(bucket_i) 
        |> values() 
        |> find(|e| e == value)
        |> is_some()
}

pub fun Set::values[T](self: Set[T]) -> mut Sequence[T] = self.buckets
    |> values()
    |> map(List::values[T])
    |> flatten()

pub fun Set::values_rep[T](self: Set[T]) -> mut Stream[T] {
    if self.size == 0 {
        return panic("Attempt to get stream from empty set!")
    }
    return self.buckets
        |> values_rep()
        |> map(List::values[T])
        |> flatten()
}

// removal

pub fun Set::remove[T](self: mut Set[T], value: T) -> Bool {
    if (self.buckets |> length()) == 0 { return false }
    val bucket_i = Int::abs(T::as_hash(value)) % (self.buckets |> length())
    val bucket = self.buckets |> at(bucket_i) 
    return bucket
        |> indices()
        |> find(|i| (bucket |> at(i)) == value)
        |> map[Int, Unit](|i| {
            self.size = self.size - 1
            bucket |> remove(i)
        })
        |> is_some()
}

pub fun Set::clear[T](self: mut Set[T]) {
    self.size = 0
    self.buckets = Stream::new[mut List[T]](|| List::empty())
        |> take(self.buckets |> length())
        |> List::collect()
}