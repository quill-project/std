
mod std

pub enum Option[T](Some: T, None)

pub fun Option::eq[T](lhs: Option[T], rhs: Option[T]) -> Bool {
    match Pair(lhs, rhs) {
        Pair(Some(a), Some(b)) { return a == b }
        Pair(None, None) { return true }
        _ { return false }
    }
}

pub fun Option::not_eq[T](lhs: Option[T], rhs: Option[T]) -> Bool
    = !Option::eq(lhs, rhs)

pub fun Option::as_string[T](self: Option[T]) -> String {
    match self {
        Some(v) { return "Some(" |> concat(T::as_string(v)) |> concat(")") }
        None { return "None" }
    }
}

pub fun Option::as_hash[T](self: Option[T]) -> Int {
    match self {
        Some(v) { return T::as_hash(v) }
        None { return 0 }
    }
}

pub fun Option::clone[T](self: Option[T]) -> Option[T] 
    = self |> map(T::clone)

pub fun Option::and[T](self: Option[T], other: Option[T]) -> Option[T] {
    match self {
        Some(_) { return other }
        None { return self }
    }
}

pub fun Option::and_then[I, O](self: Option[I], f: Fun(I) -> Option[O]) -> Option[O] {
    match self {
        Some(value) { return f(value) }
        None { return Option::None[O] }
    }
}

pub fun Option::or[T](self: Option[T], other: Option[T]) -> Option[T] {
    match self {
        Some(_) { return self }
        None { return other }
    }
}

pub fun Option::or_else[T](self: Option[T], f: Fun() -> Option[T]) -> Option[T] {
    match self {
        Some(_) { return self }
        None { return f() }
    }
}

pub fun Option::expect[T](self: Option[T], reason: String) -> T {
    match self {
        Some(value) { return value }
        None { return panic(reason) }
    }
}

pub fun Option::unwrap_or[T](self: Option[T], fallback: T) -> T {
    match self {
        Some(value) { return value }
        None { return fallback }
    }
}

pub fun Option::unwrap_or_else[T](self: Option[T], fallback: Fun() -> T) -> T {
    match self {
        Some(value) { return value }
        None { return fallback() }
    }
}

pub fun Option::map[I, O](self: Option[I], f: Fun(I) -> O) -> Option[O] {
    match self {
        Some(value) { return Option::Some(f(value)) }
        None { return Option::None }
    }
}

pub fun Option::is_some[T](self: Option[T]) -> Bool {
    match self {
        Some(_) { return true }
        None { return false }
    }
}

pub fun Option::is_none[T](self: Option[T]) -> Bool {
    match self {
        Some(_) { return false }
        None { return true }
    }
}

pub fun Option::ok_or[O, E](self: Option[O], error: E) -> Result[O, E] {
    match self {
        Some(value) { return Result::Ok(value) }
        None { return Result::Err(error) }
    }
}

pub fun Option::ok_or_else[O, E](self: Option[O], error: Fun() -> E) -> Result[O, E] {
    match self {
        Some(value) { return Result::Ok(value) }
        None { return Result::Err(error()) }
    }
}

pub fun Option::flatten[T](self: Option[Option[T]]) -> Option[T] {
    match self {
        Some(contained) { return contained }
        None { return Option::None }
    }
}

pub fun Option::as_seq[T](self: Option[T]) -> mut Sequence[T] {
    match self {
        Some(value) { return Sequence::of(value) }
        None { return Sequence::empty() }
    }
}

pub fun Option::all[T](vals: mut Sequence[Option[T]]) -> Option[mut List[T]] {
    val out: mut List[T] = List::empty()
    for opt_val: vals {
        match opt_val {
            Some(v) { out |> push(v) }
            None { return Option::None }
        }
    }
    return Option::Some(out)
}