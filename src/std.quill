
mod std

pub fun println[T](value: T) = value 
    |> T::as_string()
    |> raw_println()

pub fun eprintln[T](value: T) = value 
    |> T::as_string()
    |> raw_eprintln()

pub fun range(start: Int, end: Int) -> mut Sequence[Int] {
    mut n = start
    return Sequence::new(|| {
        if n >= end { return Option::None }
        val c = n
        n = n + 1
        return Option::Some(c)
    })
}

pub fun range_incl(start: Int, end: Int) -> mut Sequence[Int] {
    mut n = start
    return Sequence::new(|| {
        if n > end { return Option::None }
        val c = n
        n = n + 1
        return Option::Some(c)
    })
}

pub fun range_down(start: Int, end: Int) -> mut Sequence[Int] {
    mut n = start
    return Sequence::new(|| {
        if n <= end { return Option::None }
        val c = n
        n = n - 1
        return Option::Some(c)
    })
}

pub fun range_down_incl(start: Int, end: Int) -> mut Sequence[Int] {
    mut n = start
    return Sequence::new(|| {
        if n < end { return Option::None }
        val c = n
        n = n - 1
        return Option::Some(c)
    })
}

pub fun count_up_from(start: Int) -> mut Stream[Int] {
    mut n = start
    return Stream::new(|| {
        val c = n
        n = n + 1
        return c
    })
}

pub fun count_down_from(start: Int) -> mut Stream[Int] {
    mut n = start
    return Stream::new(|| {
        val c = n
        n = n - 1
        return c
    })
}

pub fun count_from(start: Int, step: Int) -> mut Stream[Int] {
    mut n = start
        return Stream::new(|| {
        val c = n
        n = n + step
        return c
    })
}