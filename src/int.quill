
mod std::Int

pub val MAX: Int = 9223372036854775807
pub val MIN: Int = -9223372036854775807 - 1


mod std

pub fun Int::as_hash(self: Int) -> Int = self

pub fun Int::clone(self: Int) -> Int = self

pub fun Int::abs(self: Int) -> Int 
    = if self < 0 { -self } else { self } 

pub fun Int::max(a: Int, b: Int) -> Int
    = if a >= b { a } else { b }

pub fun Int::min(a: Int, b: Int) -> Int
    = if a <= b { a } else { b }

pub fun Int::clamp(self: Int, min: Int, max: Int) -> Int
    = if min > max { panic[Int]("Attempt to clamp to an invalid range") }
    else if self < min { min }
    else if self > max { max }
    else { self }

pub fun Int::sign(self: Int) -> Int
    = if self < 0 { -1 }
    else if self > 0 { 1 }
    else { 0 }

pub fun Int::parse(from: String) -> Option[Int] {
    val c = from |> codes()
    mut sign = 1
    match from |> get(0) {
        Some("+") { c |> next() }
        Some("-") {
            sign = -1
            c |> next()
        }
        Some(_) {}
        None { return Option::None }
    }
    return c
        |> fold(Option::Some(0), |a, n| a |> and_then(|acc| {
            if n < 48 || 57 < n { return Option::None }
            return Option::Some((acc * 10) + (n - 48))
        }))
        |> map(|r| r * sign)
}
    